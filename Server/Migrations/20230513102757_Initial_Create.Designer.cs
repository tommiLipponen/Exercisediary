// <auto-generated />
using System;
using ExerciseDiary.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exercisediary.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230513102757_Initial_Create")]
    partial class Initial_Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("Exercisediary.Shared.Exercise", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Auto generated UUID");

                    b.Property<int?>("BmpCount")
                        .HasColumnType("int")
                        .HasComment("Average heart beat rate.");

                    b.Property<int?>("CaloriesBurned")
                        .HasColumnType("int")
                        .HasComment("Calories burned during this exercise.");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasComment("Exercise duration in minutes, data base calculates.");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasComment("Required, needed for Duration calculation.");

                    b.Property<decimal?>("EndpointLat")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("EndpointLong")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasComment("X and Y coordinates of Endpoint.");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("char(36)")
                        .HasComment("FK from ExerciseType table.");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasComment("Place where exercise took place.");

                    b.Property<int?>("MetersTraveled")
                        .HasColumnType("int")
                        .HasComment("Distance travelled.");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasComment("Exercise notes.");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasComment("Required, neede for Duration calucation.");

                    b.Property<decimal?>("StartpointLat")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasComment("X and Y coordinates of Startpoint.");

                    b.Property<decimal?>("StartpointLong")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("ExerciseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExerciseTypeId" }, "FK_ExerciseTypeId_Exercises_idx");

                    b.HasIndex(new[] { "LocationId" }, "FK_LocationId_Exercise_idx");

                    b.ToTable("Exercise", null, t =>
                        {
                            t.HasComment("Exercise instances and their details.");
                        });
                });

            modelBuilder.Entity("Exercisediary.Shared.ExerciseType", b =>
                {
                    b.Property<Guid>("ExerciseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Auto generated UUID");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("ExerciseTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExerciseName" }, "idx_ExerciseTypes_ExerciseType");

                    b.ToTable("ExerciseType", null, t =>
                        {
                            t.HasComment("Exercise types, like swimming, jogging, etc.");
                        });
                });

            modelBuilder.Entity("Exercisediary.Shared.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasComment("Name of the where exercise took place.");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Name of the exercise place, like Central Park, or Heavy Gym.");

                    b.HasKey("LocationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "City" }, "idx_Location_City");

                    b.ToTable("Location", null, t =>
                        {
                            t.HasComment("Place where exercise took place like \"New York\" \"Central Park\"");
                        });
                });

            modelBuilder.Entity("Exercisediary.Shared.Exercise", b =>
                {
                    b.HasOne("Exercisediary.Shared.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ExerciseTypeId_Exercises");

                    b.HasOne("Exercisediary.Shared.Location", "Location")
                        .WithMany("Exercises")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationId_Exercise");

                    b.Navigation("ExerciseType");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Exercisediary.Shared.ExerciseType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Exercisediary.Shared.Location", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
