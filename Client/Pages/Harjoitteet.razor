@page "/harjoitteet"
@using Exercisediary.Shared;
@inject IClientExerciseData ClientExerciseData
@inject NavigationManager NavigationManager

<PageTitle>Harjoitteet</PageTitle>

<main>
    <div class="container mt-4">
        <h1 class="mb-3">Harjoitteet</h1>
        <p class="lead mb-4">Tarkastele ja hallinnoi harjoituksiasi.  Voit lisätä, muokata ja poistaa suorituksia helposti.</p>
        <div class="row g-4">
            <div class="col-12 col-lg-8">
                <div class="card mb-3">
                    <div class="card-body">
                        <button class="btn btn-success mb-3" @onclick="CreateNewExercise">Lisää Uusi Harjoite</button>
                        <div class="grid">
                            <QuickGrid Items="@FilteredExercises" Pagination="state">
                                <PropertyColumn Property="@(e => e.ExerciseType.ExerciseName)" Title="Urheilulaji" Sortable="true"> 
                                    <ColumnOptions>
                                        <div class="search-box">
                                            <input type="search" autofocus @bind="exerciseTypeFilter" @bind:event="oninput" placeholder="Hae Laji..." />
                                        </div>
                                    </ColumnOptions>
                                </PropertyColumn>
                                <PropertyColumn Property="@(e => e.Location.City)" Title="Paikkakunta" Sortable="true">
                                    <ColumnOptions>
                                        <div class="search-box">
                                            <input type="search" autofocus @bind="locationFilter" @bind:event="oninput" placeholder="Hae Paikkakunta..." />
                                        </div>
                                    </ColumnOptions>
                                </PropertyColumn>
                                <PropertyColumn Property="exercises => exercises.StartTime" Title="Aloitusaika" Format="dd MM yyyy HH:mm" Align="Align.Center" Sortable="true" />
                                <PropertyColumn Property="exercises => exercises.EndTime" Title="Lopetusaika" Format="dd MM yyyy HH:mm" Align="Align.Center" />
                                <PropertyColumn Property="exercises => exercises.Duration" Title="Kesto min" Sortable="true" Align="Align.Center" />
                                <PropertyColumn Property="exercises => exercises.Notes" Title="Muistio" />
                                <PropertyColumn Property="exercises => exercises.MetersTraveled" Title="Matka m" Sortable="true" Align="Align.Center" />
                                <TemplateColumn Title="Toiminnot">
                                    <button class="btn btn-primary" id="muokkaabutton" @onclick="(() => ShowExercise(context.ExerciseId))">Tiedot/Muokkaus</button>
                                </TemplateColumn>
                            </QuickGrid>
                        </div>
                        <Paginator State="state" />
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-4">
                <div class="card sticky-top" style="top:1rem">
                    <div class="card-body">
                        <h2 class="card-title">Vinkki</h2>
                        <p class="card-text">Voit hakea harjoitteita lajin tai paikkakunnan mukaan. Käytä hakukenttiä taulukon yläpuolella.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    private IEnumerable<Exercise> exercises = new List<Exercise>().AsQueryable();
    PaginationState state = new PaginationState { ItemsPerPage = 10 };
    string? exerciseTypeFilter;
    string? locationFilter;

    IQueryable<Exercise> FilteredExercises
    {
        get
        {
            var result = exercises.AsQueryable();
            if (!string.IsNullOrEmpty(exerciseTypeFilter))
            {
                result = result.Where(e => e.ExerciseType.ExerciseName.Contains(exerciseTypeFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            if (!string.IsNullOrEmpty(locationFilter))
            {
                result = result.Where(e => e.Location.City.Contains(locationFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        exercises = (await ClientExerciseData.GetAllExercisesAsync()).AsQueryable();
    }

    void ShowExercise(Guid id)
    {
        NavigationManager.NavigateTo($"harjoite/{id}");
    }

    void CreateNewExercise()
    {
        NavigationManager.NavigateTo("/harjoite");
    }
}


