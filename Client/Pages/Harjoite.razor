@page "/harjoite"
@page "/harjoite/{id:guid}"
@using Exercisediary.Shared
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.QuickGrid;
@inject NavigationManager NavigationManager
@inject IClientExerciseData ClientExerciseData
@inject IClientExerciseTypeData ClientExerciseTypeData
@inject IClientLocationData ClientLocationData

<main>
    <div class="container mt-4">
        <div class="row">
            <div class="col-12 col-lg-8">
                <div class="card mb-3">
                    <div class="card-body">
                        @if (exercise == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            if(Id is null)
                            {
                                <PageTitle>Kirjaa Uusi Harjoite</PageTitle>
                                <h1 class="mb-3">Kirjaa Uusi Harjoite</h1>
                            }
                            else
                            {
                                <PageTitle>Muokkaa Harjoitteen Tietoja</PageTitle>
                                <h1 class="mb-3">Muokkaa Harjoitteen Tietoja</h1>
                            }
                            <EditForm Model="@exercise" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="mb-3">
                                    <label for="exerciseTypeId">Urheilulaji</label>
                                    <select class="form-control" id="exerciseTypeId" @bind="@exercise.ExerciseTypeId">
                                        @foreach (var exerciseType in ClientExerciseTypeData.Types)
                                        {
                                            <option value="@exerciseType.ExerciseTypeId">@exerciseType.ExerciseName</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="locationId">Kunta</label>
                                    <select class="form-control" id="locationId" @bind="@exercise.LocationId">
                                        @foreach (var location in ClientLocationData.Paikat)
                                        {
                                            <option value="@location.LocationId">@location.City</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="startTime">Start Time</label>
                                    <InputDate Type="InputDateType.DateTimeLocal" class="form-control" id="startTime" @bind-Value="@exercise.StartTime" />
                                </div>
                                <div class="mb-3">
                                    <label for="endTime">End Time</label>
                                    <InputDate Type="InputDateType.DateTimeLocal" class="form-control" id="endTime" @bind-Value="@exercise.EndTime" />
                                </div>
                                <div class="mb-3">
                                    <label for="duration">Duration Min</label>
                                    <InputNumber class="form-control" id="duration" @bind-Value="@exercise.Duration" disabled title="Lasketaan automaattisesti" />
                                </div>
                                <div class="mb-3">
                                    <label for="bmpCount">Bmp Count</label>
                                    <InputNumber class="form-control" id="bmpCount" @bind-Value="@exercise.BmpCount" />
                                </div>
                                <div class="mb-3">
                                    <label for="caloriesBurned">Calories Burned</label>
                                    <InputNumber class="form-control" id="caloriesBurned" @bind-Value="@exercise.CaloriesBurned" />
                                </div>
                                <div class="mb-3">
                                    <label for="notes">Notes</label>
                                    <InputTextArea class="form-control" id="notes" @bind-Value="@exercise.Notes" />
                                </div>
                                <div class="mb-3">
                                    <label for="startpointlat">StartpointLat</label>
                                    <InputNumber min="-9999999.999999" max="9999999.999999" step="0.000001" class="form-control" id="startpointlat" @bind-Value="@exercise.StartpointLat" title="Käytä Desimaalipilkkua." />
                                </div>
                                <div class="mb-3">
                                    <label for="startpointlong">StartpointLong</label>
                                    <InputNumber min="-9999999.999999" max="9999999.999999" step="0.000001" class="form-control" id="startpointlong" @bind-Value="@exercise.StartpointLong" title="Käytä Desimaalipilkkua." />
                                </div>
                                <div class="mb-3">
                                    <label for="endpointlat">EndpointLat</label>
                                    <InputNumber min="-9999999.999999" max="9999999.999999" step="0.000001" class="form-control" id="endpointlat" @bind-Value="@exercise.EndpointLat" title="Käytä Desimaalipilkkua." />
                                </div>
                                <div class="mb-3">
                                    <label for="endpointlong">EndpointLong</label>
                                    <InputNumber min="-9999999.999999" max="9999999.999999" step="0.000001" class="form-control" id="endpointlong" @bind-Value="@exercise.EndpointLong" title="Käytä Desimaalipilkkua." />
                                </div>
                                <div class="mb-3">
                                    <label for="meterstraveled">Meters Traveled</label>
                                    <InputNumber class="form-control" id="meterstraveled" @bind-Value="@exercise.MetersTraveled" />
                                </div>
                                <button type="submit" class="btn btn-primary">@btnText</button>
                                @if (Id is not null)
                                {
                                    <button type="button" class="btn btn-danger ms-2" @onclick="DeleteExercise">Poista Suoritustiedot</button>
                                }
                                <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Peruuta</button>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-4">
                <div class="card sticky-top" style="top:1rem">
                    <div class="card-body">
                        <h2 class="card-title">Vinkki</h2>
                        <p class="card-text">Täytä kaikki kentät huolellisesti. Kesto lasketaan automaattisesti aloitus- ja lopetusajan perusteella.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    private Exercise exercise = new()
    {
        StartTime = DateTime.Now,
        EndTime = DateTime.Now
    };  
    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Tallenna Uusi Suorite" : "Tallenna Muutos";
        await ClientLocationData.GetLocations();
        await ClientExerciseTypeData.GetExerciseTypes();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await ClientExerciseData.GetExerciseByIdAsync((Guid)Id);
            if (result is not null)
            {
                exercise = result;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/harjoite");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id is null)
        {
            await ClientExerciseData.AddExerciseAsync(exercise);
        }
        else
        {
            await ClientExerciseData.UpdateExerciseAsync((Guid)Id, exercise);
        }       
    }

    private async Task DeleteExercise()
    {
        await ClientExerciseData.DeleteExerciseByIdAsync(exercise.ExerciseId);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/harjoitteet");
    }
}
